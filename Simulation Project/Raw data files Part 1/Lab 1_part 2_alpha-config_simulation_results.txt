Introduction to ISA using SimpleScalar

Lab 1 Part 2 ALPHA-Configuration Benchmark Results

Test-math Benchmark

Anvita@ubuntu:~/Downloads/simplesim-3.0$ ./sim-profile -iclass ./tests-alpha/bin/test-math
sim-profile: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ./sim-profile -iclass ./tests-alpha/bin/test-math 

sim: simulation started @ Tue Nov  9 15:51:22 2021, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                  true # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
pow(12.0, 2.0) == 144.000000
pow(10.0, 3.0) == 1000.000000
pow(10.0, -3.0) == 0.001000
str: 123.456
x: 123.000000
str: 123.456
x: 123.456000
str: 123.456
x: 123.456000
123.456 123.456000 123 1000
sinh(2.0) = 3.62686
sinh(3.0) = 10.0179
h=3.60555
atan2(3,2) = 0.982794
pow(3.60555,4.0) = 169
169 / exp(0.982794 * 5) = 1.24102
3.93117 + 5*log(3.60555) = 10.3435
cos(10.3435) = -0.606798,  sin(10.3435) = -0.794856
x     0.5x
x0.5     x
x   0.5x
-1e-17 == -1e-17 Worked!
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                  49409 # total number of instructions executed
sim_num_refs                  13633 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate            49409.0000 # simulation speed (in insts/sec)

sim_inst_class_prof    # instruction class profile
sim_inst_class_prof.array_size = 7
sim_inst_class_prof.bucket_size = 1
sim_inst_class_prof.count = 7
sim_inst_class_prof.total = 49408
sim_inst_class_prof.imin = 0
sim_inst_class_prof.imax = 7
sim_inst_class_prof.average = 7058.2857
sim_inst_class_prof.std_dev = 9420.1151
sim_inst_class_prof.overflows = 0
# pdf == prob dist fn, cdf == cumulative dist fn
#          index      count    pdf 
sim_inst_class_prof.start_dist
load                   8486  17.18 
store                  5147  10.42 
uncond branch          1946   3.94 
cond branch            5471  11.07 
int computation       27351  55.36 
fp computation          928   1.88 
trap                     79   0.16 
sim_inst_class_prof.end_dist

ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 188416 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  41984 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000f750 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   28 # total number of pages allocated
mem.page_mem                   224k # total size of memory pages allocated
mem.ptab_misses                  74 # total first level page table misses
mem.ptab_accesses            534762 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

------------------------------------------------------------ xxx ------------------------------------------------------------------------------------


Test-fmath Benchmark

Anvita@ubuntu:~/Downloads/simplesim-3.0$ ./sim-profile -iclass ./tests-alpha/bin/test-fmath
sim-profile: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ./sim-profile -iclass ./tests-alpha/bin/test-fmath 

sim: simulation started @ Tue Nov  9 15:57:29 2021, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                  true # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
q=4 (int)x=12 (int)y=29
z=1
z=1
z=13
z=13
l=6
l=36
*lp=216
z=1.000000
q=4 x=12.000000 (int)x=12 y=29.000000 (int)y=29
q = 16  x = 11.700001  y = 23.400000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                  19498 # total number of instructions executed
sim_num_refs                   5896 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate            19498.0000 # simulation speed (in insts/sec)

sim_inst_class_prof    # instruction class profile
sim_inst_class_prof.array_size = 7
sim_inst_class_prof.bucket_size = 1
sim_inst_class_prof.count = 7
sim_inst_class_prof.total = 19497
sim_inst_class_prof.imin = 0
sim_inst_class_prof.imax = 7
sim_inst_class_prof.average = 2785.2857
sim_inst_class_prof.std_dev = 3578.4308
sim_inst_class_prof.overflows = 0
# pdf == prob dist fn, cdf == cumulative dist fn
#          index      count    pdf 
sim_inst_class_prof.start_dist
load                   3455  17.72 
store                  2441  12.52 
uncond branch           916   4.70 
cond branch            2199  11.28 
int computation       10371  53.19 
fp computation           83   0.43 
trap                     32   0.16 
sim_inst_class_prof.end_dist

ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 155648 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  41216 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012000aed0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   24 # total number of pages allocated
mem.page_mem                   192k # total size of memory pages allocated
mem.ptab_misses                 112 # total first level page table misses
mem.ptab_accesses            396154 # total page table accesses
mem.ptab_miss_rate           0.0003 # first level page table miss rate

------------------------------------------------------- xxx ------------------------------------------------------------------------------------

Test-llong Benchmark

Anvita@ubuntu:~/Downloads/simplesim-3.0$ ./sim-profile -iclass ./tests-alpha/bin/test-llong
sim-profile: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ./sim-profile -iclass ./tests-alpha/bin/test-llong 

sim: simulation started @ Tue Nov  9 16:02:12 2021, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                  true # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
x+1 = 0x0000000000000001
x-1 = 0x00000000ffffffff
y+1 = 0x0000000000000000
x+y = 0x00000000ffffffff
z*w = 0x00000000f0000000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                  10626 # total number of instructions executed
sim_num_refs                   3443 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate            10626.0000 # simulation speed (in insts/sec)

sim_inst_class_prof    # instruction class profile
sim_inst_class_prof.array_size = 7
sim_inst_class_prof.bucket_size = 1
sim_inst_class_prof.count = 7
sim_inst_class_prof.total = 10625
sim_inst_class_prof.imin = 0
sim_inst_class_prof.imax = 7
sim_inst_class_prof.average = 1517.8571
sim_inst_class_prof.std_dev = 1805.7087
sim_inst_class_prof.overflows = 0
# pdf == prob dist fn, cdf == cumulative dist fn
#          index      count    pdf 
sim_inst_class_prof.start_dist
load                   1892  17.81 
store                  1551  14.60 
uncond branch           576   5.42 
cond branch            1318  12.40 
int computation        5257  49.48 
fp computation           11   0.10 
trap                     20   0.19 
sim_inst_class_prof.end_dist

ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                  90112 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  28176 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120005540 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   16 # total number of pages allocated
mem.page_mem                   128k # total size of memory pages allocated
mem.ptab_misses                 149 # total first level page table misses
mem.ptab_accesses            221444 # total page table accesses
mem.ptab_miss_rate           0.0007 # first level page table miss rate

---------------------------------------------------- xxx --------------------------------------------------------------------------------------

Test-printf Benchmark

Anvita@ubuntu:~/Downloads/simplesim-3.0$ ./sim-profile -iclass ./tests-alpha/bin/test-printf
sim-profile: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

warning: section `.comment' ignored...
sim: command line: ./sim-profile -iclass ./tests-alpha/bin/test-printf 

sim: simulation started @ Tue Nov  9 16:07:48 2021, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                  true # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
%.4x:	`0012'
%04x:	`0012'
%4.4x:	`0012'
%04.4x:	`0012'
%4.3x:	` 012'
%04.3x:	` 012'
%.*x:	`0012'
%0*x:	`0012'
%*.*x:	`0012'
%0*.*x:	`0012'
bad format:	"z"
nil pointer (padded):	"         0"
decimal negative:	"-2345"
octal negative:	"37777773327"
hex negative:	"fffff6d7"
long decimal number:	"-123456"
long octal negative:	"1777777777777777773327"
long unsigned decimal number:	"18446744073709428160"
zero-padded LDN:	"-000123456"
left-adjusted ZLDN:	"-123456   "
space-padded LDN:	"   -123456"
left-adjusted SLDN:	"-123456   "
zero-padded string:	"    Hi, Z."
left-adjusted Z string:	"Hi, Z.    "
space-padded string:	"    Hi, Z."
left-adjusted S string:	"Hi, Z.    "
null string:	"(null)"
e-style >= 1:	"1.234000e+01"
e-style >= .1:	"1.234000e-01"
e-style < .1:	"1.234000e-03"
e-style big:	"1.000000000000000000000000000000000000000000000000000000000000e+20"
e-style == .1:	"1.000000e-01"
f-style >= 1:	"12.340000"
f-style >= .1:	"0.123400"
f-style < .1:	"0.001234"
g-style >= 1:	"12.34"
g-style >= .1:	"0.1234"
g-style < .1:	"0.001234"
g-style big:	"100000000000000000000"
:new test: 99.85:
 0.10000
 0.10000
x0.5000x
0x1
|      0.0000|  0.0000e+00|           0|
|      1.0000|  1.0000e+00|           1|
|     -1.0000| -1.0000e+00|          -1|
|    100.0000|  1.0000e+02|         100|
|   1000.0000|  1.0000e+03|        1000|
|  10000.0000|  1.0000e+04|       1e+04|
|  12345.0000|  1.2345e+04|   1.235e+04|
| 100000.0000|  1.0000e+05|       1e+05|
| 123456.0000|  1.2346e+05|   1.235e+05|

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    

Formatted output test
prefix  6d      6o      6x      6X      6u
%-+#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+# |-123   |0377   |0xff   |0XFF   |4294967295 |
 %-+0 |-123   |377    |ff     |FF     |4294967295 |
  %-+ |-123   |377    |ff     |FF     |4294967295 |
 %-#0 |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-# |-123   |0377   |0xff   |0XFF   |4294967295 |
  %-0 |-123   |377    |ff     |FF     |4294967295 |
   %- |-123   |377    |ff     |FF     |4294967295 |
 %+#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
  %+# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
  %+0 |-00123 |000377 |0000ff |0000FF |4294967295 |
   %+ |  -123 |   377 |    ff |    FF |4294967295 |
  %#0 |-00123 |000377 |0x00ff |0X00FF |4294967295 |
   %# |  -123 |  0377 |  0xff |  0XFF |4294967295 |
   %0 |-00123 |000377 |0000ff |0000FF |4294967295 |
    % |  -123 |   377 |    ff |    FF |4294967295 |
    (null)
(null)    
1.234568e+06 should be 1.234568e+06
1234567.800000 should be 1234567.800000
1.23457e+06 should be 1.23457e+06
123.456 should be 123.456
1e+06 should be 1e+06
10 should be 10
0.02 should be 0.02
testing parametric fields: 0.7000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                 983472 # total number of instructions executed
sim_num_refs                 282516 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate           983472.0000 # simulation speed (in insts/sec)

sim_inst_class_prof    # instruction class profile
sim_inst_class_prof.array_size = 7
sim_inst_class_prof.bucket_size = 1
sim_inst_class_prof.count = 7
sim_inst_class_prof.total = 983471
sim_inst_class_prof.imin = 0
sim_inst_class_prof.imax = 7
sim_inst_class_prof.average = 140495.8571
sim_inst_class_prof.std_dev = 187088.3311
sim_inst_class_prof.overflows = 0
# pdf == prob dist fn, cdf == cumulative dist fn
#          index      count    pdf 
sim_inst_class_prof.start_dist
load                 176948  17.99 
store                105568  10.73 
uncond branch         47444   4.82 
cond branch          112002  11.39 
int computation      539382  54.84 
fp computation          863   0.09 
trap                   1264   0.13 
sim_inst_class_prof.end_dist

ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                  98304 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                  34096 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x01200057f0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   17 # total number of pages allocated
mem.page_mem                   136k # total size of memory pages allocated
mem.ptab_misses                4123 # total first level page table misses
mem.ptab_accesses           2763613 # total page table accesses
mem.ptab_miss_rate           0.0015 # first level page table miss rate

------------------------------------------------------------- xxx ------------------------------------------------------------------------------